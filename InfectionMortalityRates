import pandas as pd
df = pd.read_excel('/Users/smiths4/Documents/WhiteHat Training/Covid1v3.xlsx', sheet_name='Database')
df2 = pd.read_excel('/Users/smiths4/Documents/WhiteHat Training/Covid2v3.xlsx')
df3 = pd.read_excel('/Users/smiths4/Documents/WhiteHat Training/Countries.xlsx')

# Clean original tables
pd.set_option('display.max_rows', None)
table1 = df[['COUNTRY','REGION','CATEGORY','MEASURE','DATE_IMPLEMENTED']]

table1.rename(columns={'COUNTRY': 'Country'
                   ,'REGION':'Region'
                   ,'CATEGORY':'PolicyType'
                   ,'MEASURE':'TotalMeasures'
                   ,'DATE_IMPLEMENTED':'Date'}, inplace=True)

table2 = df2[['dateRep','cases','deaths','countriesAndTerritories','popData2018','continentExp']]

table2.rename(columns={'dateRep':'Date'
                       ,'cases':'Cases'
                       ,'deaths':'Deaths'
                       ,'countriesAndTerritories':'Country'
                       ,'popData2018':'Population'
                       ,'continentExp':'Region'}, inplace=True)

table2['Country'] = table2['Country'].str.replace('_', ' ')

table1 = pd.merge(df3
                 ,table1
                 ,on='Country'
                 ,how='left')

# First Case by Country
first_case = table2[table2['Cases'] > 0]
first_case = first_case.sort_values('Cases',ascending=True).groupby('Country', as_index=False).first()
first_case = first_case[['Country','Date']]
first_case

table1 = pd.merge(table1
                 ,first_case
                 ,on='Country'
                 ,how='inner')
table1.rename(columns={'Date_x':'PolicyDate','Date_y':'FirstCase'},inplace=True)
# table1.PolicyType.unique()

# table1

# Total Policies vs Date of first case
AdvancePolicyType = table1[table1['PolicyDate']<table1['FirstCase']]
AdvancePolicyType = AdvancePolicyType.sort_values('Country',ascending=True).groupby(['Country','PolicyType'], as_index=False).count()
AdvancePolicyType = AdvancePolicyType[['Country','PolicyType','TotalMeasures']]
AdvancePolicyType.rename(columns={'TotalMeasures':'AdvancePolicies'},inplace=True)

AdvancePolicy = table1[table1['PolicyDate']<table1['FirstCase']]
AdvancePolicy = AdvancePolicy.sort_values('Country',ascending=True).groupby('Country', as_index=False).count()
AdvancePolicy = AdvancePolicy[['Country','TotalMeasures']]
AdvancePolicy.rename(columns={'TotalMeasures':'AdvancePolicies'},inplace=True)

LatePolicyType = table1[table1['PolicyDate']>table1['FirstCase']]
LatePolicyType = LatePolicyType.sort_values('Country',ascending=True).groupby(['Country','PolicyType'], as_index=False).count()
LatePolicyType = LatePolicyType[['Country','PolicyType','TotalMeasures']]
LatePolicyType.rename(columns={'TotalMeasures':'LatePolicies'},inplace=True)

LatePolicy = table1[table1['PolicyDate']>table1['FirstCase']]
LatePolicy = LatePolicy.sort_values('Country',ascending=True).groupby('Country', as_index=False).count()
LatePolicy = LatePolicy[['Country','TotalMeasures']]
LatePolicy.rename(columns={'TotalMeasures':'LatePolicies'},inplace=True)

# Creat main summary table
pd.set_option('display.max_rows', None)

region = table1[['Country','Region']]
region = region.sort_values('Country',ascending=True).groupby('Country', as_index=False).first()

policies = table1.sort_values('Country',ascending=True).groupby('Country', as_index=False).count()
policies = policies[['Country','TotalMeasures']]

deaths = table2.groupby('Country')['Deaths'].sum()
table3 = deaths.to_frame()

cases = table2.groupby('Country')['Cases'].sum()
table3['Cases'] = cases

population = table2.groupby('Country')['Population'].first()
table3['Population'] = population

table3.reset_index(inplace=True)

main_table = pd.merge(table3
                     ,region
                     ,on='Country'
                     ,how='left')

main_table = pd.merge(main_table
                ,AdvancePolicy
                ,on='Country'
                ,how='left')

main_table = pd.merge(main_table
                     ,LatePolicy
                     ,on='Country'
                     ,how='left')

main_table = pd.merge(main_table
                     ,policies
                     ,on='Country'
                     ,how='left')

socialdis = table1[table1['PolicyType']=='Social distancing']
socialdis
SDpolicies = socialdis.sort_values('Country',ascending=True).groupby('Country', as_index=False).count()
SDpolicies = SDpolicies[['Country','TotalMeasures']]
SDpolicies.rename(columns={'TotalMeasures':'SDPolicies'},inplace=True)


main_table = pd.merge(main_table
                      ,SDpolicies
                      ,on='Country'
                      ,how='left')

main_table = main_table[main_table['Cases']>0]

main_table['InfectionRate'] = main_table.apply(lambda x : x['Cases']/x['Population']*100, axis=1)
main_table['MortalityRate'] = main_table.apply(lambda x : x['Deaths']/x['Population']*100, axis=1)
main_table['DeathCaseRate'] = main_table.apply(lambda x : x['Deaths']/x['Cases']*100, axis=1)
main_table

# PLOTLY GRAPH - Mortality/Infection

import datetime
import numpy as np
import pandas as pd
import plotly.graph_objects as go
from ipywidgets import widgets


Americas = main_table[main_table['Region']=='Americas']
Asia = main_table[main_table['Region']=='Asia']
Africa = main_table[main_table['Region']=='Africa']
Europe = main_table[main_table['Region']=='Europe']
MiddleEast = main_table[main_table['Region']=='Middle East']
Pacific = main_table[main_table['Region']=='Pacific']


fig = go.Figure()

fig.add_trace(go.Scatter(
    x=Americas['InfectionRate'],
    y=Americas['MortalityRate'],
    text=Americas['Country'],
    mode='markers',
    marker = dict(color = '#00CED1', size= np.sqrt(Americas['Deaths'])/8),
    hovertemplate =
    '<b>%{text}: </b><br>'+
    'Mortality Rate:<i> %{y:.2f}% </i><br>'+
    'Infection Rate:<i> %{x:.2f}% </i>'+
    '<extra></extra>',
    name='Americas',
    showlegend = True))

fig.add_trace(go.Scatter(
    x=Asia['InfectionRate'],
    y=Asia['MortalityRate'],
    text=Asia['Country'],
    mode='markers',
    marker = dict(color = '#6495ED', size= np.sqrt(Asia['Deaths'])/8),
    hovertemplate =
    '<b>%{text}: </b><br>'+
    'Mortality Rate:<i> %{y:.2f}% </i><br>'+
    'Infection Rate:<i> %{x:.2f}% </i>'+
    '<extra></extra>',
    name='Asia',
    showlegend = True))

fig.add_trace(go.Scatter(
    x=Africa['InfectionRate'],
    y=Africa['MortalityRate'],
    text=Africa['Country'],
    mode='markers',
    marker = dict(color = '#BA55D3', size= np.sqrt(Africa['Deaths'])/8),
    hovertemplate =
    '<b>%{text}: </b><br>'+
    'Mortality Rate:<i> %{y:.2f}% </i><br>'+
    'Infection Rate:<i> %{x:.2f}% </i>'+
    '<extra></extra>',
    name='Africa',
    showlegend = True))

fig.add_trace(go.Scatter(
    x=Europe['InfectionRate'],
    y=Europe['MortalityRate'],
    text=Europe['Country'],
    mode='markers',
    marker = dict(color = '#FF6347', size= np.sqrt(Europe['Deaths'])/8),
    hovertemplate =
    '<b>%{text}: </b><br>'+
    'Mortality Rate:<i> %{y:.2f}% </i><br>'+
    'Infection Rate:<i> %{x:.2f}% </i>'+
    '<extra></extra>',
    name='Europe',
    showlegend = True))

fig.add_trace(go.Scatter(
    x=Pacific['InfectionRate'],
    y=Pacific['MortalityRate'],
    text=Pacific['Country'],
    mode='markers',
    marker = dict(color = '#00FA9A', size= np.sqrt(Pacific['Deaths'])/8),
    hovertemplate =
    '<b>%{text}: </b><br>'+
    'Mortality Rate:<i> %{y:.2f}% </i><br>'+
    'Infection Rate:<i> %{x:.2f}% </i>'+
    '<extra></extra>',
    name='Pacific',
    showlegend = True))

fig.add_trace(go.Scatter(
    x=MiddleEast['InfectionRate'],
    y=MiddleEast['MortalityRate'],
    text=MiddleEast['Country'],
    mode='markers',
    marker = dict(color = '#FFD700', size= np.sqrt(MiddleEast['Deaths'])/8),
    hovertemplate =
    '<b>%{text}: </b><br>'+
    'Mortality Rate:<i> %{y:.2f}% </i><br>'+
    'Infection Rate:<i> %{x:.2f}% </i>'+
    '<extra></extra>',
    name='MiddleEast',
    showlegend = True))
    
# fig.update_traces(marker=dict(size={'itemsizing': 'constant'}))

fig.update_layout(
                    title='COVID-19 Infection & Mortality Rates',
                    xaxis_title='Infection Rate',
                    yaxis_title='Mortality Rate (% of Population)',
                    xaxis=dict(ticksuffix='%',showgrid=False),
                    yaxis=dict(ticksuffix='%',showgrid=False),
                    legend= {'itemsizing': 'constant'},
                    font=dict(
                        family='Courier New, monospace',
                        size=18,
                        color='#7f7f7f'))
fig.show()
