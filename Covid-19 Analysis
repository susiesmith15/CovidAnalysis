import pandas as pd
df = pd.read_excel('/Users/smiths4/Documents/WhiteHat Training/Covid1v4.xlsx', sheet_name='Database')
df2 = pd.read_excel('/Users/smiths4/Documents/WhiteHat Training/Covid2v4.xlsx')

# Clean original tables
pd.set_option('display.max_rows', None)
table1 = df[['COUNTRY','REGION','CATEGORY','MEASURE','DATE_IMPLEMENTED']]

table1.rename(columns={'COUNTRY': 'Country'
                   ,'REGION':'Region'
                   ,'CATEGORY':'PolicyType'
                   ,'MEASURE':'TotalMeasures'
                   ,'DATE_IMPLEMENTED':'Date'}, inplace=True)

table2 = df2[['dateRep','cases','deaths','countriesAndTerritories','popData2018','continentExp']]

table2.rename(columns={'dateRep':'Date'
                       ,'cases':'Cases'
                       ,'deaths':'Deaths'
                       ,'countriesAndTerritories':'Country'
                       ,'popData2018':'Population'
                       ,'continentExp':'Region'}, inplace=True)

table2['Country'] = table2['Country'].str.replace('_', ' ')
table1

firstpolicy = table1.sort_values(['Country','Date'],ascending=True).groupby('Country', as_index=False).first()
uk = table1[table1['Country']=='United Kingdom']
uk

# First Case by Country
first_case = table2[table2['Cases'] > 0]
first_case = first_case.sort_values('Cases',ascending=True).groupby('Country', as_index=False).first()
first_case = first_case[['Country','Date']]
first_case

table1 = pd.merge(table1
                 ,first_case
                 ,on='Country'
                 ,how='inner')
table1.rename(columns={'Date_x':'PolicyDate','Date_y':'FirstCase'},inplace=True)
# table1.PolicyType.unique()

# from datetime import datetime
# table1['FirstCase'] = table1.apply(lambda x : datetime.strptime(x['FirstCase'], r'%d/%m/%Y'), axis=1)

table1

# Total Policies vs Date of first case
AdvancePolicyType = table1[table1['PolicyDate']<table1['FirstCase']]
AdvancePolicyType = AdvancePolicyType.sort_values('Country',ascending=True).groupby(['Country','PolicyType'], as_index=False).count()
AdvancePolicyType = AdvancePolicyType[['Country','PolicyType','TotalMeasures']]
AdvancePolicyType.rename(columns={'TotalMeasures':'AdvancePolicies'},inplace=True)

AdvancePolicy = table1[table1['PolicyDate']<table1['FirstCase']]
AdvancePolicy = AdvancePolicy.sort_values('Country',ascending=True).groupby('Country', as_index=False).count()
AdvancePolicy = AdvancePolicy[['Country','TotalMeasures']]
AdvancePolicy.rename(columns={'TotalMeasures':'AdvancePolicies'},inplace=True)

LatePolicyType = table1[table1['PolicyDate']>table1['FirstCase']]
LatePolicyType = LatePolicyType.sort_values('Country',ascending=True).groupby(['Country','PolicyType'], as_index=False).count()
LatePolicyType = LatePolicyType[['Country','PolicyType','TotalMeasures']]
LatePolicyType.rename(columns={'TotalMeasures':'LatePolicies'},inplace=True)

LatePolicy = table1[table1['PolicyDate']>table1['FirstCase']]
LatePolicy = LatePolicy.sort_values('Country',ascending=True).groupby('Country', as_index=False).count()
LatePolicy = LatePolicy[['Country','TotalMeasures']]
LatePolicy.rename(columns={'TotalMeasures':'LatePolicies'},inplace=True)

# Creat main summary table
pd.set_option('display.max_rows', None)

region = table1[['Country','Region']]
region = region.sort_values('Country',ascending=True).groupby('Country', as_index=False).first()

policies = table1.sort_values('Country',ascending=True).groupby('Country', as_index=False).count()
policies = policies[['Country','TotalMeasures']]

deaths = table2.groupby('Country')['Deaths'].sum()
table3 = deaths.to_frame()

cases = table2.groupby('Country')['Cases'].sum()
table3['Cases'] = cases

population = table2.groupby('Country')['Population'].first()
table3['Population'] = population

table3.reset_index(inplace=True)

table3['InfectionRate'] = table3.apply(lambda x : x['Cases']/x['Population']*100, axis=1)
table3['MortalityRate'] = table3.apply(lambda x : x['Deaths']/x['Population']*100, axis=1)
table3['DeathCaseRate'] = table3.apply(lambda x : x['Deaths']/x['Cases'], axis=1)


main_table1 = pd.merge(table3
                     ,region
                     ,on='Country'
                     ,how='left')

main_table2 = pd.merge(main_table1
                ,AdvancePolicy
                ,on='Country'
                ,how='left')

main_table3 = pd.merge(main_table2
                     ,LatePolicy
                     ,on='Country'
                     ,how='left')

main_table = pd.merge(main_table3
                     ,policies
                     ,on='Country'
                     ,how='left')



# socialdis = table1[table1['PolicyType']=='Social distancing']
# socialdis
# SDpolicies = socialdis.sort_values('Country',ascending=True).groupby('Country', as_index=False).count()
# SDpolicies = SDpolicies[['Country','TotalMeasures']]
# SDpolicies.rename(columns={'TotalMeasures':'SDPolicies'},inplace=True)


# main_table = pd.merge(main_table
#                       ,SDpolicies
#                       ,on='Country'
#                       ,how='left')

main_table = main_table[main_table['Cases']>0]

main_table

# PLOTLY GRAPH - Mortality/Infection

import datetime
import numpy as np
import pandas as pd
import plotly.graph_objects as go
from ipywidgets import widgets


Americas = main_table[main_table['Region']=='Americas']
Asia = main_table[main_table['Region']=='Asia']
Africa = main_table[main_table['Region']=='Africa']
Europe = main_table[main_table['Region']=='Europe']
MiddleEast = main_table[main_table['Region']=='Middle East']
Pacific = main_table[main_table['Region']=='Pacific']


fig = go.Figure()

fig.add_trace(go.Scatter(
    x=Americas['InfectionRate'],
    y=Americas['MortalityRate'],
    text=Americas['Country'],
    mode='markers',
    marker = dict(color = '#00CED1', size= np.sqrt(Americas['Deaths'])/8),
    hovertemplate =
    '<b>%{text}: </b><br>'+
    'Mortality Rate:<i> %{y:.2f}% </i><br>'+
    'Infection Rate:<i> %{x:.2f}% </i>'+
    '<extra></extra>',
    name='Americas',
    showlegend = True))

fig.add_trace(go.Scatter(
    x=Asia['InfectionRate'],
    y=Asia['MortalityRate'],
    text=Asia['Country'],
    mode='markers',
    marker = dict(color = '#6495ED', size= np.sqrt(Asia['Deaths'])/8),
    hovertemplate =
    '<b>%{text}: </b><br>'+
    'Mortality Rate:<i> %{y:.2f}% </i><br>'+
    'Infection Rate:<i> %{x:.2f}% </i>'+
    '<extra></extra>',
    name='Asia',
    showlegend = True))

fig.add_trace(go.Scatter(
    x=Africa['InfectionRate'],
    y=Africa['MortalityRate'],
    text=Africa['Country'],
    mode='markers',
    marker = dict(color = '#BA55D3', size= np.sqrt(Africa['Deaths'])/8),
    hovertemplate =
    '<b>%{text}: </b><br>'+
    'Mortality Rate:<i> %{y:.2f}% </i><br>'+
    'Infection Rate:<i> %{x:.2f}% </i>'+
    '<extra></extra>',
    name='Africa',
    showlegend = True))

fig.add_trace(go.Scatter(
    x=Europe['InfectionRate'],
    y=Europe['MortalityRate'],
    text=Europe['Country'],
    mode='markers',
    marker = dict(color = '#FF6347', size= np.sqrt(Europe['Deaths'])/8),
    hovertemplate =
    '<b>%{text}: </b><br>'+
    'Mortality Rate:<i> %{y:.2f}% </i><br>'+
    'Infection Rate:<i> %{x:.2f}% </i>'+
    '<extra></extra>',
    name='Europe',
    showlegend = True))

fig.add_trace(go.Scatter(
    x=Pacific['InfectionRate'],
    y=Pacific['MortalityRate'],
    text=Pacific['Country'],
    mode='markers',
    marker = dict(color = '#00FA9A', size= np.sqrt(Pacific['Deaths'])/8),
    hovertemplate =
    '<b>%{text}: </b><br>'+
    'Mortality Rate:<i> %{y:.2f}% </i><br>'+
    'Infection Rate:<i> %{x:.2f}% </i>'+
    '<extra></extra>',
    name='Pacific',
    showlegend = True))

fig.add_trace(go.Scatter(
    x=MiddleEast['InfectionRate'],
    y=MiddleEast['MortalityRate'],
    text=MiddleEast['Country'],
    mode='markers',
    marker = dict(color = '#FFD700', size= np.sqrt(MiddleEast['Deaths'])/8),
    hovertemplate =
    '<b>%{text}: </b><br>'+
    'Mortality Rate:<i> %{y:.2f}% </i><br>'+
    'Infection Rate:<i> %{x:.2f}% </i>'+
    '<extra></extra>',
    name='MiddleEast',
    showlegend = True))
    
# fig.update_traces(marker=dict(size={'itemsizing': 'constant'}))
fig.add_annotation(
            x=0.51,
            y=0.029,
            xref="x",
            yref="y",
            text="USA: Most Deaths",
#             showarrow=True,
            arrowhead=5,
            ax=70,
            ay=-40,
            font=dict(
                    family='Courier New, monospace',
                    size=10,
                    color='#7f7f7f')
)
fig.add_annotation(
            x=1.90,
            y=0.12,
            xref="x",
            yref="y",
            text="San Marino: Highest IR & MR",
#             showarrow=True,
            arrowhead=5,
            ax=-70,
            ay=40,
            font=dict(
                    family='Courier New, monospace',
                    size=10,
                    color='#7f7f7f')
)



fig.update_layout(
                    title='COVID-19 Infection & Mortality Rates',
                    xaxis_title='Infection Rate',
                    yaxis_title='Mortality Rate (% of Population)',
                    xaxis=dict(ticksuffix='%',showgrid=False),
                    yaxis=dict(ticksuffix='%',showgrid=False),
                    legend= {'itemsizing': 'constant'},
                    font=dict(
                        family='Courier New, monospace',
                        size=18,
                        color='#7f7f7f'))
fig.show()

# Widget graphs: Cases & Deaths

df=table2

# create dropdown widget for country selection
textbox = widgets.Dropdown(
    description='Country:   ',
     value='France',
    options=df['Country'].unique().tolist()
)

container = widgets.HBox([textbox])

# create data trace
trace1 = go.Scatter( x=df['Date']
                    ,y=df['Cases']
#                     ,yaxis='y2'
                    ,mode='lines'
                    ,text=df['Country']
                    ,opacity=0.75
                    ,hovertemplate =
                        '<b>Country:</b><i> %{text} </i><br>'+
                        'Date: %{x}<br>'+
                        'Cases: <b>%{y}</b><br>'+
                        '<extra></extra>'
                    ,name='Cases')

trace2 = go.Bar(x=df['Date']
                    ,y=df['Deaths']
#                     ,yaxis='y1'
                    ,text=df['Country']
                    ,opacity=0.75
                    ,hovertemplate =
                        'Country:<b> %{text} </b><br>'+
                        'Date: %{x}<br>'+
                        'Deaths: <b>%{y}</b><br>'+
                        '<extra></extra>'
                    ,name='Deaths')

# create plot, with data and layout variables
# g = go.FigureWidget(data=[trace1,trace2]
#                     ,layout=go.Layout(title=dict(text='New Reported Cases of COVID-19')
#                                      ,xaxis_title='Date'
#                                      ,yaxis_title='No. of Cases/Deaths'
#                                      ,font=dict(family='Courier New, monospace'
#                                                 ,size=16
#                                                 ,color='#7f7f7f')
#                                      ,showlegend=True
#                                      )
#                     )

g = go.FigureWidget(data=[trace1,trace2]
                    ,layout=go.Layout(title=dict(text='New Reported Cases & Deaths by COVID-19')
                                     ,xaxis=dict(title='Date',showgrid=False)
                                     ,yaxis=dict(title='Number',showgrid=False)
                                     ,font=dict(family='Courier New, monospace'
                                                ,size=16
                                                ,color='#7f7f7f')
                                     ,showlegend=True
                                     )
                    )

# create function to check widget input is in dataframe - NOT NEEDED
def validate():
    if textbox.value in df['Country'].unique():
        return True
    else:
        return False


# create function to filter dataframe for the widget's selected country
def response(change):
    if validate():
        filter_list = [i for i in
                       zip(df['Country'] == textbox.value)]
        temp_df = df[filter_list]
    else:
        filter_list = [i for i in
                       zip(df['Country'] == 'France')]
        temp_df = df[filter_list]
        
# set variables equal to new df & update trace with them^
    v1 = temp_df['Date']
    v2 = temp_df['Cases']
    v3 = temp_df['Country']
    v4 = temp_df['Deaths']
    with g.batch_update():
        g.data[0].x = v1
        g.data[0].y = v2
        g.data[0].text = v3
        g.data[1].x = v1
        g.data[1].y = v4
        g.data[1].text = v3
        g.layout['title']['text'] = 'New Reported Cases & Deaths by Covid-19: '+ textbox.value
        
# observe ?? not sure what this is for
textbox.observe(response,names="value")


# create app with the widget and the plot
# container = widgets.HBox([textbox])
app = widgets.VBox([container,
              g])

app

# Pre-emptive policies vs Infection Rate 
main_table = main_table.sort_values('AdvancePolicies',ascending=False)

fig = go.Figure()

fig.add_trace(go.Bar(
    x=main_table['Country'],
    y=main_table['AdvancePolicies'],
    yaxis='y1',
    text=main_table['InfectionRate'],
    marker = dict(color = '#00CED1'),
    hovertemplate =
    '<b>%{x}: </b><br>'+
    'Infection Rate:<i> %{text: .2f}% </i><br>'+
    'Pre-emptive Policies:<i> %{y} </i><br>'+
    '<extra></extra>',
    name='Pre-emptive Policies',
    showlegend=True))

fig.add_trace(go.Scatter(
    x=main_table['Country'],
    y=main_table['InfectionRate'],
    yaxis='y2',
    text=main_table['AdvancePolicies'],
    mode='markers',
    marker = dict(color = '#FF6347',symbol='x'),
    hovertemplate =
    '<b>%{x}: </b><br>'+
    'Infection Rate:<i> %{y:.2f}% </i><br>'+
    'Pre-emptive Policies:<i> %{text} </i><br>'+
    '<extra></extra>',
    name='Infection Rate',
    showlegend=True))
    

fig.add_annotation(
            x=105,
            y=130,
            xref="x",
            yref="y",
            text=
            'Infection rate rises as<br>' + 
            'the number of pre-emptive<br>' + 
            'policies taken by a country falls',
#             showarrow=False,
#             arrowhead=5,
            ax=0,
            ay=0,
            font=dict(
                    family='Courier New, monospace',
                    size=12,
                    color='#7f7f7f')
)
    
fig.update_layout(
                    title='COVID-19 Pre-emptive Policies vs Infection Rate by Country',
                    xaxis=dict(title='Country'
                               ,showgrid=False
                               ,showticklabels=False),
                    yaxis=dict(title='Pre-emptive Policies Implemented'
                               ,showgrid=False),
                    yaxis2=dict(title='Infection Rate'
                                      ,overlaying='y'
                                      ,side='right'
                                      ,showgrid=False
                                      ,ticksuffix='%'),
                    width=1000,
                    height=600,
                    legend= {'itemsizing': 'constant'},
#                     legend=dict(x=-.1),
                    font=dict(
                        family='Courier New, monospace',
                        size=14,
                        color='#7f7f7f'))
fig.show()

AdvancePolicyType
AdvPolType = pd.merge(AdvancePolicyType
                     ,main_table1
                     ,on='Country'
                     ,how='right')
AdvPolType

# MODELLING graph

# Pre-emptive policies vs Infection Rate 
main_table = main_table.sort_values('AdvancePolicies',ascending=False)

fig = go.Figure()

fig.add_trace(go.Scatter(
    x=main_table['AdvancePolicies'],
    y=main_table['InfectionRate'],
    text=main_table['Country'],
    mode='markers',
    marker = dict(color = '#00CED1',symbol='x'),
    hovertemplate =
    '<b>%{text}: </b><br>'+
    'Infection Rate:<i> %{y:.2f}% </i><br>'+
    'Pre-emptive Policies:<i> %{x} </i><br>'+
    '<extra></extra>',
    name='Country'))
    
    
fig.update_layout(
                    title='COVID-19 Pre-emptive Policies vs Infection Rate by Country',
                    xaxis=dict(title='Advance Policies'
                               ,showgrid=False),
                    yaxis=dict(title='Infection Rate'
                                      ,showgrid=False
                                      ,ticksuffix='%'),
                    width=900,
                    height=600,
                    legend= {'itemsizing': 'constant'},
#                     legend=dict(x=-.1),
                    font=dict(
                        family='Courier New, monospace',
                        size=14,
                        color='#7f7f7f'))
fig.show()

# Correlation
from scipy.stats import pearsonr

main_table['AdvancePolicies'] = main_table['AdvancePolicies'].fillna(0)
main_table['InfectionRate'] = main_table['InfectionRate'].fillna(0)

corr, _ = pearsonr(main_table['AdvancePolicies'], main_table['InfectionRate'])
print(corr)

import numpy as np  
import matplotlib.pyplot as plt  
import seaborn as seabornInstance 
from sklearn.model_selection import train_test_split 
from sklearn.linear_model import LinearRegression
from sklearn import metrics
%matplotlib inline

data = main_table
plt.figure(figsize=(12, 6))
X = data.iloc[:, 8].values.reshape(-1, 1)  # values converts it into a numpy array
Y = data.iloc[:, 4].values.reshape(-1, 1) 
linear_regressor = LinearRegression()  # create object for the class
linear_regressor.fit(X, Y)  # perform linear regression with X and Y
Y_pred = linear_regressor.predict(X)  # make predictions for Y
plt.scatter(X, Y)
plt.plot(X, Y_pred, color='red')
plt.xlabel('Infection Rate')
plt.ylabel('Advance Policies')
plt.show()

linear_regressor.coef_

linear_regressor.intercept_

print('R2:', metrics.r2_score(Y, Y_pred))
